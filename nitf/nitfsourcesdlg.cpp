// Copyright (c) 1994-2009 Georgia Tech Research Corporation, Atlanta, GA
// This file is part of FalconView(tm).

// FalconView(tm) is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// FalconView(tm) is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.

// You should have received a copy of the GNU Lesser General Public License
// along with FalconView(tm).  If not, see <http://www.gnu.org/licenses/>.

// FalconView(tm) is a trademark of Georgia Tech Research Corporation.

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "nitfsourcesdlg.h"

/////////////////////////////////////////////////////////////////////////////
// CNITFSourcesDlg

IMPLEMENT_DYNCREATE(CNITFSourcesDlg, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CNITFSourcesDlg properties

/////////////////////////////////////////////////////////////////////////////
// CNITFSourcesDlg operations

void CNITFSourcesDlg::Initialize(LPCTSTR bsConnectString, LPCTSTR bsLogFile, LPCTSTR bsPermanentLocalPath)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bsConnectString, bsLogFile, bsPermanentLocalPath);
}

void CNITFSourcesDlg::EnableCtrl(long iEnable)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 iEnable);
}

long CNITFSourcesDlg::ExecuteSQL(LPCTSTR bsSQLString)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		bsSQLString);
	return result;
}

LPDISPATCH CNITFSourcesDlg::QuerySQL(LPCTSTR bsSelectString, LPCTSTR bsFilterString)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		bsSelectString, bsFilterString);
	return result;
}

void CNITFSourcesDlg::EnableDisplayOptions(long eDisplayOptions)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 eDisplayOptions);
}

void CNITFSourcesDlg::SetControlMode(long eControlMode)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 eControlMode);
}

long CNITFSourcesDlg::SpecialFunction(long eFunctionCode, const VARIANT& varParam1, const VARIANT& varParam2, const VARIANT& varParam3, VARIANT* pvarResult1, VARIANT* pvarResult2)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		eFunctionCode, &varParam1, &varParam2, &varParam3, pvarResult1, pvarResult2);
	return result;
}
